import { useEffect, useState } from 'react'

// Tipos para o PWA
interface BeforeInstallPromptEvent extends Event {
  prompt(): Promise<void>
  userChoice: Promise<{ outcome: 'accepted' | 'dismissed' }>
}

export function usePWA() {
  const [isOnline, setIsOnline] = useState(navigator.onLine)
  const [isInstallable, setIsInstallable] = useState(false)
  const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null)
  const [needRefresh, setNeedRefresh] = useState(false)
  const [isStandalone, setIsStandalone] = useState(false)

  // Fun√ß√£o para atualizar service worker
  const updateServiceWorker = (reloadPage = true) => {
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.getRegistrations().then((registrations) => {
        let hasWaiting = false
        
        registrations.forEach((registration) => {
          if (registration.waiting) {
            hasWaiting = true
            console.log('üîÑ Atualizando service worker...')
            
            // Enviar mensagem para o service worker esperando
            registration.waiting.postMessage({ type: 'SKIP_WAITING' })
            
            // Aguardar um pouco antes de recarregar
            setTimeout(() => {
              if (reloadPage) {
                console.log('üîÑ Recarregando p√°gina...')
                window.location.reload()
              }
            }, 100)
          }
        })
        
        if (!hasWaiting) {
          console.log('‚ö†Ô∏è Nenhum service worker esperando para atualizar')
          // For√ßar recarregamento se n√£o h√° service worker esperando
          if (reloadPage) {
            window.location.reload()
          }
        }
      }).catch((error) => {
        console.error('‚ùå Erro ao atualizar service worker:', error)
        // Fallback: recarregar p√°gina
        if (reloadPage) {
          window.location.reload()
        }
      })
    } else {
      console.log('‚ö†Ô∏è Service Worker n√£o suportado')
      // Fallback: recarregar p√°gina
      if (reloadPage) {
        window.location.reload()
      }
    }
  }

  // Monitorar status de conex√£o
  useEffect(() => {
    const handleOnline = () => setIsOnline(true)
    const handleOffline = () => setIsOnline(false)

    window.addEventListener('online', handleOnline)
    window.addEventListener('offline', handleOffline)

    return () => {
      window.removeEventListener('online', handleOnline)
      window.removeEventListener('offline', handleOffline)
    }
  }, [])

  // Detectar se o app pode ser instalado
  useEffect(() => {
    // Verificar se j√° est√° instalado (standalone mode)
    const checkStandalone = () => {
      const standalone = window.matchMedia('(display-mode: standalone)').matches ||
                        (window.navigator as any).standalone === true ||
                        document.referrer.includes('android-app://')
      setIsStandalone(standalone)
    }

    // Verificar se √© instal√°vel imediatamente
    const checkInstallability = () => {
      // Para PWAs, sempre considerar instal√°vel se n√£o estiver standalone
      const isNotStandalone = !window.matchMedia('(display-mode: standalone)').matches &&
                             (window.navigator as any).standalone !== true &&
                             !document.referrer.includes('android-app://')
      
      // Verificar se tem service worker ativo
      const hasServiceWorker = 'serviceWorker' in navigator
      
      // Verificar se est√° em HTTPS ou localhost
      const isSecure = location.protocol === 'https:' || location.hostname === 'localhost'
      
      if (isNotStandalone && hasServiceWorker && isSecure) {
        setIsInstallable(true)
      }
    }

    const handleBeforeInstallPrompt = (e: Event) => {
      e.preventDefault()
      setDeferredPrompt(e as BeforeInstallPromptEvent)
      setIsInstallable(true)
    }

    // Verifica√ß√µes iniciais
    checkStandalone()
    checkInstallability()

    // Listener para o evento padr√£o
    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt)
    
    // Listener para mudan√ßas no display mode
    const mediaQuery = window.matchMedia('(display-mode: standalone)')
    mediaQuery.addEventListener('change', checkStandalone)

    return () => {
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt)
      mediaQuery.removeEventListener('change', checkStandalone)
    }
  }, [])

  // Detectar atualiza√ß√µes do service worker
  useEffect(() => {
    if ('serviceWorker' in navigator) {
      // Verificar se h√° service worker esperando
      navigator.serviceWorker.getRegistrations().then((registrations) => {
        registrations.forEach((registration) => {
          if (registration.waiting) {
            setNeedRefresh(true)
          }
        })
      })

      // Escutar mudan√ßas no controller
      navigator.serviceWorker.addEventListener('controllerchange', () => {
        setNeedRefresh(true)
      })

      // Escutar mensagens do service worker
      navigator.serviceWorker.addEventListener('message', (event) => {
        if (event.data && event.data.type === 'SW_UPDATE_AVAILABLE') {
          setNeedRefresh(true)
        }
      })
    }
  }, [])

  // Instalar PWA
  const installPWA = async () => {
    console.log('üöÄ Iniciando instala√ß√£o for√ßada do PWA...')
    
    if (deferredPrompt) {
      console.log('üì± Usando prompt nativo do navegador')
      deferredPrompt.prompt()
      const { outcome } = await deferredPrompt.userChoice
      
      if (outcome === 'accepted') {
        console.log('‚úÖ PWA instalado com sucesso via prompt nativo')
        setDeferredPrompt(null)
        setIsInstallable(false)
      } else {
        console.log('‚ùå Instala√ß√£o do PWA rejeitada via prompt nativo')
      }
    } else {
      console.log('üîß Tentando instala√ß√£o alternativa...')
      
      try {
        // Registrar service worker personalizado se n√£o estiver registrado
        if ('serviceWorker' in navigator) {
          const registration = await navigator.serviceWorker.register('/sw.js')
          console.log('‚úÖ Service Worker registrado:', registration)
          
          // Aguardar o service worker estar ativo
          await navigator.serviceWorker.ready
          console.log('‚úÖ Service Worker ativo')
        }

        // Tentar for√ßar o prompt de instala√ß√£o
        const result = await forceInstallPrompt()
        
        if (result.success) {
          console.log('‚úÖ Instala√ß√£o iniciada com sucesso')
        } else {
          console.log('‚ö†Ô∏è Instala√ß√£o n√£o dispon√≠vel:', result.reason)
          showInstallInstructions()
        }
        
      } catch (error) {
        console.error('‚ùå Erro na instala√ß√£o:', error)
        showInstallInstructions()
      }
    }
  }

  // Fun√ß√£o para for√ßar prompt de instala√ß√£o
  const forceInstallPrompt = async () => {
    try {
      // Verificar se j√° est√° instalado
      if (window.matchMedia('(display-mode: standalone)').matches) {
        return { success: false, reason: 'J√° instalado' }
      }

      // Tentar diferentes m√©todos de instala√ß√£o
      const installMethods = [
        // M√©todo 1: Verificar se o navegador suporta instala√ß√£o
        () => {
          if ('serviceWorker' in navigator && 'PushManager' in window) {
            // For√ßar reload para tentar mostrar o prompt
            setTimeout(() => {
              window.location.reload()
            }, 100)
            return { success: true }
          }
          return { success: false, reason: 'Navegador n√£o suporta PWA' }
        },
        
        // M√©todo 2: Tentar abrir em nova janela para for√ßar prompt
        () => {
          const newWindow = window.open(window.location.href, '_blank')
          if (newWindow) {
            newWindow.focus()
            setTimeout(() => {
              newWindow.close()
            }, 2000)
            return { success: true }
          }
          return { success: false, reason: 'N√£o foi poss√≠vel abrir nova janela' }
        }
      ]

      // Tentar cada m√©todo
      for (const method of installMethods) {
        try {
          const result = method()
          if (result.success) {
            return result
          }
        } catch (error) {
          console.warn('M√©todo de instala√ß√£o falhou:', error)
        }
      }

      return { success: false, reason: 'Nenhum m√©todo funcionou' }
      
    } catch (error) {
      console.error('Erro ao for√ßar prompt:', error)
      return { success: false, reason: error instanceof Error ? error.message : 'Erro desconhecido' }
    }
  }

  // Fun√ß√£o para mostrar instru√ß√µes de instala√ß√£o
  const showInstallInstructions = () => {
    const isChrome = navigator.userAgent.includes('Chrome')
    const isEdge = navigator.userAgent.includes('Edg')
    const isSafari = navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome')
    const isFirefox = navigator.userAgent.includes('Firefox')

    let instructions = ''
    
    if (isChrome || isEdge) {
      instructions = `Para instalar este app no Chrome/Edge:

1. Clique nos 3 pontos (‚ãÆ) no canto superior direito
2. Selecione "Instalar Reposit√≥rio de Vagas"
3. Ou procure o √≠cone de instala√ß√£o na barra de endere√ßos

O app ser√° instalado como um aplicativo nativo!`
    } else if (isSafari) {
      instructions = `Para instalar no Safari:

1. Toque no bot√£o de compartilhar (üì§)
2. Role para baixo e toque em "Adicionar √† Tela de In√≠cio"
3. Toque em "Adicionar"

O app ser√° instalado como um √≠cone na tela inicial!`
    } else if (isFirefox) {
      instructions = `Para instalar no Firefox:

1. Clique no √≠cone de instala√ß√£o na barra de endere√ßos
2. Ou v√° ao menu > "Instalar"
3. Confirme a instala√ß√£o

O app ser√° instalado como um aplicativo!`
    } else {
      instructions = `Para instalar este app:

Procure pelo √≠cone de instala√ß√£o na barra de endere√ßos ou no menu do navegador.
O app pode ser instalado como um aplicativo nativo no seu dispositivo.`
    }

    alert(instructions)
  }

  // Atualizar service worker
  const updateSW = () => {
    console.log('üîÑ Iniciando atualiza√ß√£o do service worker...')
    setNeedRefresh(false) // Resetar estado imediatamente
    updateServiceWorker(true)
  }

  return {
    isOnline,
    isInstallable,
    needRefresh,
    installPWA,
    updateSW,
    setNeedRefresh,
    isStandalone
  }
}
