#!/usr/bin/env node

/**
 * Script para testar a detec√ß√£o de PWA instalado
 */

import fs from 'fs'

console.log('üîç Testando detec√ß√£o de PWA instalado...\n')

try {
  // Verificar se os arquivos existem
  const files = [
    'src/hooks/usePWA.ts',
    'src/components/PWAInstallPrompt.tsx',
    'src/App.tsx'
  ]

  console.log('üìÅ Verificando arquivos necess√°rios...')
  files.forEach(file => {
    if (fs.existsSync(file)) {
      console.log(`  ‚úÖ ${file}`)
    } else {
      console.log(`  ‚ùå ${file} - ARQUIVO N√ÉO ENCONTRADO`)
      process.exit(1)
    }
  })

  // Verificar implementa√ß√£o no usePWA.ts
  const usePWAContent = fs.readFileSync('src/hooks/usePWA.ts', 'utf8')
  
  console.log('\nüîß Verificando implementa√ß√£o no usePWA.ts...')
  
  const checks = [
    { name: 'Fun√ß√£o checkInstalled implementada', pattern: /const checkInstalled = useCallback\(\(\) => \{/ },
    { name: 'Verifica√ß√£o display-mode standalone', pattern: /window\.matchMedia\('\(display-mode: standalone\)'\)\.matches/ },
    { name: 'Verifica√ß√£o iOS standalone', pattern: /\(window\.navigator as any\)\.standalone === true/ },
    { name: 'Logs de debug implementados', pattern: /console\.log\('\[PWA\] Verifica√ß√£o de instala√ß√£o:'/ },
    { name: 'Event listener appinstalled', pattern: /window\.addEventListener\('appinstalled', handleAppInstalled\)/ },
    { name: 'Atualiza√ß√£o de estado quando instalado', pattern: /isInstalled: true/ }
  ]

  let passedChecks = 0
  checks.forEach(check => {
    if (check.pattern.test(usePWAContent)) {
      console.log(`  ‚úÖ ${check.name}`)
      passedChecks++
    } else {
      console.log(`  ‚ùå ${check.name}`)
    }
  })

  // Verificar implementa√ß√£o no PWAInstallPrompt.tsx
  const promptContent = fs.readFileSync('src/components/PWAInstallPrompt.tsx', 'utf8')
  
  console.log('\nüéØ Verificando implementa√ß√£o no PWAInstallPrompt.tsx...')
  
  const promptChecks = [
    { name: 'Verifica√ß√£o isInstalled no render', pattern: /if \(!showPrompt \|\| isInstalled\)/ },
    { name: 'Logs de debug implementados', pattern: /console\.log\('\[PWA Install Prompt\] Estado atual:'/ },
    { name: 'Oculta√ß√£o quando instalado', pattern: /if \(isInstalled\) \{[\s\S]*?console\.log\('\[PWA Install Prompt\] App j√° instalado/ },
    { name: 'Hook usePWA importado', pattern: /import { usePWA } from '@\/hooks\/usePWA'/ }
  ]

  let passedPromptChecks = 0
  promptChecks.forEach(check => {
    if (check.pattern.test(promptContent)) {
      console.log(`  ‚úÖ ${check.name}`)
      passedPromptChecks++
    } else {
      console.log(`  ‚ùå ${check.name}`)
    }
  })

  // Verificar se est√° sendo usado no App.tsx
  const appContent = fs.readFileSync('src/App.tsx', 'utf8')
  
  console.log('\nüì± Verificando uso no App.tsx...')
  
  const appChecks = [
    { name: 'PWAInstallPrompt importado', pattern: /import { PWAInstallPrompt } from '\.\/components\/PWAInstallPrompt'/ },
    { name: 'PWAInstallPrompt renderizado', pattern: /<PWAInstallPrompt \/>/ }
  ]

  let passedAppChecks = 0
  appChecks.forEach(check => {
    if (check.pattern.test(appContent)) {
      console.log(`  ‚úÖ ${check.name}`)
      passedAppChecks++
    } else {
      console.log(`  ‚ùå ${check.name}`)
    }
  })

  console.log(`\nüìä Resultado dos testes:`)
  console.log(`  usePWA.ts: ${passedChecks}/${checks.length} verifica√ß√µes passaram`)
  console.log(`  PWAInstallPrompt.tsx: ${passedPromptChecks}/${promptChecks.length} verifica√ß√µes passaram`)
  console.log(`  App.tsx: ${passedAppChecks}/${appChecks.length} verifica√ß√µes passaram`)

  const totalPassed = passedChecks + passedPromptChecks + passedAppChecks
  const totalChecks = checks.length + promptChecks.length + appChecks.length

  if (totalPassed === totalChecks) {
    console.log('\nüéâ SUCESSO! Detec√ß√£o de PWA instalado implementada corretamente!')
    console.log('\n‚úÖ Funcionalidades implementadas:')
    console.log('  üîç Detec√ß√£o robusta de PWA instalado')
    console.log('  üì± Suporte para diferentes navegadores e dispositivos')
    console.log('  üö´ Oculta√ß√£o autom√°tica quando app j√° est√° instalado')
    console.log('  üìù Logs de debug para monitoramento')
    console.log('  ‚ö° Atualiza√ß√£o em tempo real do estado')
    
    console.log('\nüöÄ Como testar:')
    console.log('  1. Acesse http://localhost:3003')
    console.log('  2. Abra DevTools > Console')
    console.log('  3. Verifique os logs de detec√ß√£o de PWA')
    console.log('  4. Instale o PWA usando o prompt')
    console.log('  5. Recarregue a p√°gina - o prompt deve desaparecer')
    console.log('  6. Verifique os logs confirmando que est√° instalado')
    
  } else {
    console.log('\n‚ùå ALGUMAS VERIFICA√á√ïES FALHARAM!')
    console.log(`Apenas ${totalPassed}/${totalChecks} verifica√ß√µes passaram.`)
    console.log('Verifique os arquivos e corrija as implementa√ß√µes faltantes.')
    process.exit(1)
  }
  
} catch (error) {
  console.error('‚ùå Erro ao verificar implementa√ß√£o:', error.message)
  process.exit(1)
}
