// Script para testar pol√≠ticas RLS e permiss√µes espec√≠ficas
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://mywaoaofatgwbbtyqfpd.supabase.co'
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im15d2FvYW9mYXRnd2JidHlxZnBkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg2MDAzMjQsImV4cCI6MjA3NDE3NjMyNH0._9AMjjkQnDam-ciD9r07X4IpiWG2Hl0jBrFcY-v61Wg'

const supabase = createClient(supabaseUrl, supabaseAnonKey)

async function testRLSPolicies() {
  console.log('üîç Testando pol√≠ticas RLS e permiss√µes...')
  console.log('=' .repeat(60))
  
  try {
    // 1. Testar sem autentica√ß√£o
    console.log('üîÑ Teste 1: Sem autentica√ß√£o')
    const { data: unauthenticatedData, error: unauthenticatedError } = await supabase
      .from('vagas')
      .select('count')
      .limit(1)
    
    console.log('   Resultado:', unauthenticatedError ? `‚ùå ${unauthenticatedError.message}` : `‚úÖ ${unauthenticatedData?.length || 0} registros`)
    
    // 2. Fazer login
    console.log('üîÑ Teste 2: Fazendo login...')
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email: 'roberio.gomes@atento.com',
      password: 'admin123'
    })
    
    if (authError) {
      console.error('‚ùå Erro no login:', authError.message)
      return
    }
    
    console.log('   ‚úÖ Login realizado com sucesso')
    console.log('   üë§ Usu√°rio:', authData.user.email)
    console.log('   üÜî ID:', authData.user.id)
    
    // 3. Verificar sess√£o atual
    console.log('üîÑ Teste 3: Verificando sess√£o atual...')
    const { data: { session }, error: sessionError } = await supabase.auth.getSession()
    
    if (sessionError) {
      console.error('‚ùå Erro ao obter sess√£o:', sessionError.message)
    } else if (session) {
      console.log('   ‚úÖ Sess√£o ativa encontrada')
      console.log('   üîë Token:', session.access_token.substring(0, 20) + '...')
    } else {
      console.log('   ‚ö†Ô∏è Nenhuma sess√£o ativa')
    }
    
    // 4. Testar consulta simples
    console.log('üîÑ Teste 4: Consulta simples na tabela vagas...')
    const { data: simpleData, error: simpleError } = await supabase
      .from('vagas')
      .select('id, cliente, site, cargo')
      .limit(5)
    
    if (simpleError) {
      console.error('   ‚ùå Erro na consulta simples:', simpleError.message)
      console.error('   üìã C√≥digo do erro:', simpleError.code)
      console.error('   üìã Detalhes:', simpleError.details)
    } else {
      console.log(`   ‚úÖ ${simpleData?.length || 0} registros retornados`)
      if (simpleData && simpleData.length > 0) {
        console.log('   üìã Primeiro registro:', simpleData[0])
      }
    }
    
    // 5. Testar consulta com count
    console.log('üîÑ Teste 5: Consulta com count...')
    const { count, error: countError } = await supabase
      .from('vagas')
      .select('*', { count: 'exact', head: true })
    
    if (countError) {
      console.error('   ‚ùå Erro no count:', countError.message)
    } else {
      console.log(`   ‚úÖ Total de vagas: ${count}`)
    }
    
    // 6. Testar consulta para clientes √∫nicos
    console.log('üîÑ Teste 6: Consulta para clientes √∫nicos...')
    const { data: clientesData, error: clientesError } = await supabase
      .from('vagas')
      .select('cliente')
      .not('cliente', 'is', null)
    
    if (clientesError) {
      console.error('   ‚ùå Erro na consulta de clientes:', clientesError.message)
    } else {
      const clientes = [...new Set(clientesData?.map(item => item.cliente).filter(Boolean) || [])]
      console.log(`   ‚úÖ ${clientes.length} clientes √∫nicos encontrados`)
      console.log('   üìã Clientes:', clientes.slice(0, 5).join(', '))
    }
    
    // 7. Testar consulta para sites √∫nicos
    console.log('üîÑ Teste 7: Consulta para sites √∫nicos...')
    const { data: sitesData, error: sitesError } = await supabase
      .from('vagas')
      .select('site')
      .not('site', 'is', null)
    
    if (sitesError) {
      console.error('   ‚ùå Erro na consulta de sites:', sitesError.message)
    } else {
      const sites = [...new Set(sitesData?.map(item => item.site).filter(Boolean) || [])]
      console.log(`   ‚úÖ ${sites.length} sites √∫nicos encontrados`)
      console.log('   üìã Sites:', sites.slice(0, 5).join(', '))
    }
    
    // 8. Verificar pol√≠ticas RLS
    console.log('üîÑ Teste 8: Verificando pol√≠ticas RLS...')
    const { data: policiesData, error: policiesError } = await supabase
      .rpc('get_table_policies', { table_name: 'vagas' })
      .catch(() => {
        // Se a fun√ß√£o n√£o existir, tentar consulta direta
        return supabase
          .from('pg_policies')
          .select('*')
          .eq('tablename', 'vagas')
      })
    
    if (policiesError) {
      console.log('   ‚ö†Ô∏è N√£o foi poss√≠vel verificar pol√≠ticas RLS:', policiesError.message)
    } else {
      console.log(`   ‚úÖ ${policiesData?.length || 0} pol√≠ticas encontradas`)
    }
    
    console.log('=' .repeat(60))
    console.log('‚úÖ Teste de pol√≠ticas RLS conclu√≠do!')
    
  } catch (error) {
    console.error('üí• Erro geral no teste:', error)
  }
}

testRLSPolicies()
