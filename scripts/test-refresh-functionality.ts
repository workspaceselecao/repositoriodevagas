#!/usr/bin/env tsx

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

// Carregar vari√°veis de ambiente
dotenv.config()

// Configura√ß√£o do Supabase para Node.js
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://mywaoaofatgwbbtyqfpd.supabase.co'
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im15d2FvYW9mYXRnd2JidHlxZnBkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg2MDAzMjQsImV4cCI6MjA3NDE3NjMyNH0._9AMjjkQnDam-ciD9r07X4IpiWG2Hl0jBrFcY-v61Wg'
const supabaseServiceKey = process.env.VITE_SUPABASE_SERVICE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im15d2FvYW9mYXRnd2JidHlxZnBkIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1ODYwMDMyNCwiZXhwIjoyMDc0MTc2MzI0fQ.oUhs-CNusuqxKFIwjc1zv0Nh4TJ6opnmzt8_V1Lfq7U'

const supabase = createClient(supabaseUrl, supabaseAnonKey)
const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey)

console.log('üß™ TESTE DO BOT√ÉO ATUALIZAR - P√ÅGINA OPORTUNIDADES')
console.log('=' .repeat(60))

async function testRefreshFunctionality() {
  try {
    console.log('\n1Ô∏è‚É£ TESTANDO FUN√á√ÉO getVagas...')
    
    // Simular a fun√ß√£o getVagas que √© chamada pelo refreshVagas
    const { data: vagas, error } = await supabaseAdmin
      .from('vagas')
      .select('*')
      .order('created_at', { ascending: false })
    
    if (error) {
      console.error('‚ùå Erro ao buscar vagas:', error)
      return
    }
    
    console.log(`‚úÖ ${vagas?.length || 0} vagas encontradas`)
    
    if (vagas && vagas.length > 0) {
      console.log('üìã Primeiras 3 vagas:')
      vagas.slice(0, 3).forEach((vaga, index) => {
        console.log(`${index + 1}. ${vaga.titulo || vaga.cargo} - ${vaga.cliente}`)
      })
    }

    console.log('\n2Ô∏è‚É£ TESTANDO PERFORMANCE DA CONSULTA...')
    
    const startTime = Date.now()
    const { data: vagasPerformance, error: perfError } = await supabaseAdmin
      .from('vagas')
      .select('id, titulo, cargo, cliente, site, created_at, updated_at')
      .order('updated_at', { ascending: false })
    
    const endTime = Date.now()
    const duration = endTime - startTime
    
    if (perfError) {
      console.error('‚ùå Erro na consulta de performance:', perfError)
    } else {
      console.log(`‚úÖ Consulta executada em ${duration}ms`)
      console.log(`üìä ${vagasPerformance?.length || 0} registros retornados`)
      
      if (duration > 2000) {
        console.log('‚ö†Ô∏è Consulta lenta - pode causar problemas de UX')
      } else if (duration > 1000) {
        console.log('‚ö†Ô∏è Consulta moderada - considerar otimiza√ß√£o')
      } else {
        console.log('‚úÖ Performance adequada')
      }
    }

    console.log('\n3Ô∏è‚É£ TESTANDO CACHE E ATUALIZA√á√ÉO...')
    
    // Simular m√∫ltiplas chamadas para testar cache
    const promises = []
    for (let i = 0; i < 3; i++) {
      promises.push(
        supabaseAdmin
          .from('vagas')
          .select('count')
          .then(result => ({ iteration: i + 1, count: result.count }))
      )
    }
    
    const results = await Promise.all(promises)
    console.log('üìä Resultados das consultas paralelas:')
    results.forEach(result => {
      console.log(`   Itera√ß√£o ${result.iteration}: ${result.count} vagas`)
    })

    console.log('\n4Ô∏è‚É£ VERIFICANDO ESTRUTURA DOS DADOS...')
    
    if (vagas && vagas.length > 0) {
      const sampleVaga = vagas[0]
      console.log('üìã Estrutura de uma vaga:')
      console.log('   Campos dispon√≠veis:', Object.keys(sampleVaga))
      
      // Verificar campos importantes
      const importantFields = ['id', 'titulo', 'cargo', 'cliente', 'site', 'created_at', 'updated_at']
      const missingFields = importantFields.filter(field => !(field in sampleVaga))
      
      if (missingFields.length > 0) {
        console.log('‚ö†Ô∏è Campos importantes ausentes:', missingFields)
      } else {
        console.log('‚úÖ Todos os campos importantes est√£o presentes')
      }
    }

    console.log('\n5Ô∏è‚É£ RESUMO DO TESTE...')
    console.log('=' .repeat(30))
    console.log('üîç DIAGN√ìSTICO:')
    console.log(`   - Total de vagas: ${vagas?.length || 0}`)
    console.log(`   - Tempo de consulta: ${duration}ms`)
    console.log(`   - Performance: ${duration < 1000 ? 'Boa' : duration < 2000 ? 'Moderada' : 'Lenta'}`)
    console.log(`   - Estrutura: ${vagas && vagas.length > 0 ? 'OK' : 'Problema'}`)
    
    console.log('\nüí° POSS√çVEIS CAUSAS DO PROBLEMA:')
    console.log('   1. Consulta muito lenta (>2s)')
    console.log('   2. Erro na fun√ß√£o getVagas')
    console.log('   3. Problema no CacheContext')
    console.log('   4. Estado de loading n√£o sendo atualizado')
    console.log('   5. Hook useVagas n√£o reagindo √†s mudan√ßas')

  } catch (error) {
    console.error('‚ùå Erro durante teste:', error)
  }
}

// Executar teste
testRefreshFunctionality()
  .then(() => {
    console.log('\nüèÅ Teste conclu√≠do!')
    process.exit(0)
  })
  .catch(error => {
    console.error('üí• Erro fatal:', error)
    process.exit(1)
  })
