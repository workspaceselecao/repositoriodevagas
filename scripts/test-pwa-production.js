import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

console.log('üîç Testando PWA em produ√ß√£o...\n')

const productionUrl = 'https://repositoriodevagas-k67ahmi63-workspace-selecaos-projects.vercel.app'

console.log(`üåê URL de Produ√ß√£o: ${productionUrl}`)

// Verificar se os arquivos necess√°rios existem localmente
const requiredFiles = [
  'dist/manifest.webmanifest',
  'dist/sw.js',
  'dist/index.html'
]

console.log('\nüìÅ Verificando arquivos locais:')
let allFilesExist = true

requiredFiles.forEach(file => {
  const filePath = path.join(__dirname, '..', file)
  const exists = fs.existsSync(filePath)
  console.log(`${exists ? '‚úÖ' : '‚ùå'} ${file}`)
  if (!exists) allFilesExist = false
})

// Verificar manifest
try {
  const manifestPath = path.join(__dirname, '..', 'dist/manifest.webmanifest')
  const manifestContent = fs.readFileSync(manifestPath, 'utf8')
  const manifest = JSON.parse(manifestContent)
  
  console.log('\nüìã Verificando Manifest:')
  console.log(`‚úÖ Nome: ${manifest.name}`)
  console.log(`‚úÖ Short Name: ${manifest.short_name}`)
  console.log(`‚úÖ Start URL: ${manifest.start_url}`)
  console.log(`‚úÖ Display: ${manifest.display}`)
  console.log(`‚úÖ Theme Color: ${manifest.theme_color}`)
  console.log(`‚úÖ Background Color: ${manifest.background_color}`)
  console.log(`‚úÖ √çcones: ${manifest.icons.length} √≠cones`)
  
  // Verificar se tem √≠cones maskable
  const maskableIcons = manifest.icons.filter(icon => icon.purpose === 'maskable')
  console.log(`‚úÖ √çcones Maskable: ${maskableIcons.length}`)
  
  // Verificar se tem √≠cone 192x192 e 512x512
  const has192 = manifest.icons.some(icon => icon.sizes === '192x192')
  const has512 = manifest.icons.some(icon => icon.sizes === '512x512')
  console.log(`‚úÖ √çcone 192x192: ${has192 ? 'Sim' : 'N√£o'}`)
  console.log(`‚úÖ √çcone 512x512: ${has512 ? 'Sim' : 'N√£o'}`)
  
} catch (error) {
  console.log('‚ùå Erro ao verificar manifest:', error.message)
  allFilesExist = false
}

// Verificar HTML
try {
  const htmlPath = path.join(__dirname, '..', 'dist/index.html')
  const htmlContent = fs.readFileSync(htmlPath, 'utf8')
  
  console.log('\nüåê Verificando HTML:')
  console.log(`‚úÖ Meta viewport: ${htmlContent.includes('viewport') ? 'Sim' : 'N√£o'}`)
  console.log(`‚úÖ Meta theme-color: ${htmlContent.includes('theme-color') ? 'Sim' : 'N√£o'}`)
  console.log(`‚úÖ Manifest link: ${htmlContent.includes('manifest.webmanifest') ? 'Sim' : 'N√£o'}`)
  console.log(`‚úÖ Apple touch icon: ${htmlContent.includes('apple-touch-icon') ? 'Sim' : 'N√£o'}`)
  
} catch (error) {
  console.log('‚ùå Erro ao verificar HTML:', error.message)
  allFilesExist = false
}

console.log('\n' + '='.repeat(60))
if (allFilesExist) {
  console.log('üéâ PWA configurado corretamente!')
  console.log('\nüìù Para testar em produ√ß√£o:')
  console.log(`1. Acesse: ${productionUrl}`)
  console.log('2. Abra DevTools (F12) ‚Üí Application ‚Üí Manifest')
  console.log('3. Verifique se n√£o h√° erros vermelhos')
  console.log('4. V√° em Application ‚Üí Service Workers')
  console.log('5. Verifique se est√° registrado e ativo')
  console.log('6. Procure o √≠cone de instala√ß√£o na barra de endere√ßos')
  console.log('\n‚ö†Ô∏è  Problemas comuns:')
  console.log('- Cache do navegador (Ctrl+Shift+R para limpar)')
  console.log('- Usu√°rio precisa interagir com o site primeiro')
  console.log('- PWA j√° foi instalado antes')
  console.log('- Navegador n√£o suporta PWA')
} else {
  console.log('‚ùå Alguns arquivos est√£o faltando. Execute: npm run build')
}
