// Script de teste para verificar se as configura√ß√µes est√£o funcionando
import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config()

const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseKey = process.env.VITE_SUPABASE_SERVICE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente VITE_SUPABASE_URL e VITE_SUPABASE_SERVICE_KEY s√£o obrigat√≥rias')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function testSystemConfig() {
  console.log('üß™ Testando sistema de configura√ß√µes...')
  
  try {
    // 1. Verificar se a tabela existe
    console.log('\n1Ô∏è‚É£ Verificando se a tabela system_config existe...')
    const { data: tables, error: tablesError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_name', 'system_config')
    
    if (tablesError) {
      console.error('‚ùå Erro ao verificar tabelas:', tablesError)
      return
    }
    
    if (tables && tables.length > 0) {
      console.log('‚úÖ Tabela system_config existe')
    } else {
      console.log('‚ùå Tabela system_config n√£o existe')
      return
    }
    
    // 2. Verificar configura√ß√µes existentes
    console.log('\n2Ô∏è‚É£ Verificando configura√ß√µes existentes...')
    const { data: configs, error: configsError } = await supabase
      .from('system_config')
      .select('*')
      .order('config_key')
    
    if (configsError) {
      console.error('‚ùå Erro ao buscar configura√ß√µes:', configsError)
      return
    }
    
    console.log(`‚úÖ Encontradas ${configs?.length || 0} configura√ß√µes:`)
    configs?.forEach(config => {
      console.log(`   - ${config.config_key}: ${config.config_value}`)
    })
    
    // 3. Testar atualiza√ß√£o de configura√ß√£o
    console.log('\n3Ô∏è‚É£ Testando atualiza√ß√£o de configura√ß√£o...')
    const testKey = 'test_config'
    const testValue = 'test_value_' + Date.now()
    
    // Primeiro, inserir uma configura√ß√£o de teste
    const { error: insertError } = await supabase
      .from('system_config')
      .insert({
        config_key: testKey,
        config_value: testValue,
        description: 'Configura√ß√£o de teste'
      })
    
    if (insertError) {
      console.error('‚ùå Erro ao inserir configura√ß√£o de teste:', insertError)
    } else {
      console.log('‚úÖ Configura√ß√£o de teste inserida com sucesso')
      
      // Agora testar atualiza√ß√£o
      const newValue = 'updated_' + Date.now()
      const { error: updateError } = await supabase
        .from('system_config')
        .update({ config_value: newValue })
        .eq('config_key', testKey)
      
      if (updateError) {
        console.error('‚ùå Erro ao atualizar configura√ß√£o:', updateError)
      } else {
        console.log('‚úÖ Configura√ß√£o atualizada com sucesso')
      }
      
      // Limpar configura√ß√£o de teste
      const { error: deleteError } = await supabase
        .from('system_config')
        .delete()
        .eq('config_key', testKey)
      
      if (deleteError) {
        console.error('‚ùå Erro ao limpar configura√ß√£o de teste:', deleteError)
      } else {
        console.log('‚úÖ Configura√ß√£o de teste removida')
      }
    }
    
    console.log('\nüéâ Teste conclu√≠do com sucesso!')
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error)
  }
}

testSystemConfig()
