#!/usr/bin/env tsx

import { execSync } from 'child_process'
import { readFileSync, existsSync } from 'fs'
import { join } from 'path'

interface ReleaseOptions {
  type: 'patch' | 'minor' | 'major'
  description?: string
  skipTests?: boolean
  skipBuild?: boolean
  skipPush?: boolean
  dryRun?: boolean
}

class ReleaseManager {
  private projectRoot: string

  constructor() {
    this.projectRoot = process.cwd()
  }

  /**
   * Executa comandos com tratamento de erro
   */
  private execCommand(command: string, options: { cwd?: string; stdio?: 'inherit' | 'pipe' } = {}): string {
    try {
      return execSync(command, { 
        encoding: 'utf-8', 
        cwd: options.cwd || this.projectRoot,
        stdio: options.stdio || 'pipe'
      }).trim()
    } catch (error) {
      console.error(`‚ùå Erro ao executar comando: ${command}`)
      throw error
    }
  }

  /**
   * Verifica se o reposit√≥rio est√° limpo
   */
  private checkRepositoryStatus(): void {
    console.log('üîç Verificando status do reposit√≥rio...')
    
    const status = this.execCommand('git status --porcelain')
    if (status) {
      console.log('‚ö†Ô∏è Reposit√≥rio possui mudan√ßas n√£o commitadas:')
      console.log(status)
      throw new Error('Reposit√≥rio deve estar limpo antes do release')
    }
    
    console.log('‚úÖ Reposit√≥rio est√° limpo')
  }

  /**
   * Executa testes (se existirem)
   */
  private runTests(): void {
    console.log('üß™ Executando testes...')
    
    try {
      // Verificar se existe script de teste
      const packageJson = JSON.parse(readFileSync(join(this.projectRoot, 'package.json'), 'utf-8'))
      
      if (packageJson.scripts?.test) {
        this.execCommand('npm test', { stdio: 'inherit' })
        console.log('‚úÖ Testes passaram')
      } else {
        console.log('‚ÑπÔ∏è Nenhum script de teste encontrado, pulando...')
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Testes falharam ou n√£o foram encontrados')
      throw error
    }
  }

  /**
   * Executa linting
   */
  private runLint(): void {
    console.log('üîç Executando linting...')
    
    try {
      this.execCommand('npm run lint', { stdio: 'inherit' })
      console.log('‚úÖ Linting passou')
    } catch (error) {
      console.warn('‚ö†Ô∏è Linting falhou')
      throw error
    }
  }

  /**
   * Executa build
   */
  private runBuild(): void {
    console.log('üèóÔ∏è Executando build...')
    
    try {
      this.execCommand('npm run build', { stdio: 'inherit' })
      console.log('‚úÖ Build conclu√≠do')
    } catch (error) {
      console.error('‚ùå Build falhou')
      throw error
    }
  }

  /**
   * Executa o processo de versionamento
   */
  private bumpVersion(type: 'patch' | 'minor' | 'major', description?: string): void {
    console.log(`üì¶ Incrementando vers√£o ${type}...`)
    
    try {
      const command = description 
        ? `npm run version:${type} -- "${description}"`
        : `npm run version:${type}`
      
      this.execCommand(command, { stdio: 'inherit' })
      console.log('‚úÖ Vers√£o incrementada')
    } catch (error) {
      console.error('‚ùå Erro ao incrementar vers√£o')
      throw error
    }
  }

  /**
   * Faz commit das mudan√ßas
   */
  private commitChanges(): void {
    console.log('üìù Fazendo commit das mudan√ßas...')
    
    try {
      this.execCommand('git add .', { stdio: 'inherit' })
      this.execCommand('npm run commit', { stdio: 'inherit' })
      console.log('‚úÖ Mudan√ßas commitadas')
    } catch (error) {
      console.error('‚ùå Erro ao fazer commit')
      throw error
    }
  }

  /**
   * Faz push das mudan√ßas e tags
   */
  private pushChanges(): void {
    console.log('üì§ Enviando mudan√ßas...')
    
    try {
      this.execCommand('git push', { stdio: 'inherit' })
      this.execCommand('git push --tags', { stdio: 'inherit' })
      console.log('‚úÖ Mudan√ßas enviadas')
    } catch (error) {
      console.error('‚ùå Erro ao fazer push')
      throw error
    }
  }

  /**
   * Executa o processo completo de release
   */
  public async release(options: ReleaseOptions): Promise<void> {
    const { type, description, skipTests, skipBuild, skipPush, dryRun } = options
    
    console.log(`üöÄ Iniciando processo de release ${type}...`)
    console.log(`üìã Modo: ${dryRun ? 'DRY RUN (simula√ß√£o)' : 'REAL'}`)
    console.log(`üìã Descri√ß√£o: ${description || 'Nenhuma'}`)
    console.log(`üìã Pular testes: ${skipTests ? 'Sim' : 'N√£o'}`)
    console.log(`üìã Pular build: ${skipBuild ? 'Sim' : 'N√£o'}`)
    console.log(`üìã Pular push: ${skipPush ? 'Sim' : 'N√£o'}\n`)

    try {
      // 1. Verificar status do reposit√≥rio
      this.checkRepositoryStatus()

      // 2. Executar testes (se n√£o pular)
      if (!skipTests) {
        this.runTests()
      }

      // 3. Executar linting
      this.runLint()

      // 4. Executar build (se n√£o pular)
      if (!skipBuild) {
        this.runBuild()
      }

      // 5. Incrementar vers√£o
      this.bumpVersion(type, description)

      // 6. Fazer commit (se n√£o for dry run)
      if (!dryRun) {
        this.commitChanges()

        // 7. Fazer push (se n√£o pular)
        if (!skipPush) {
          this.pushChanges()
        }
      }

      console.log('\nüéâ Release conclu√≠do com sucesso!')
      
      if (dryRun) {
        console.log('üìã Este foi um DRY RUN - nenhuma mudan√ßa foi aplicada')
        console.log('üìã Para executar o release real, remova a flag --dry-run')
      } else {
        console.log('üìã Release publicado com sucesso!')
        console.log('üìã Verifique o deploy autom√°tico se configurado')
      }

    } catch (error) {
      console.error('\n‚ùå Release falhou:', error)
      process.exit(1)
    }
  }

  /**
   * Mostra informa√ß√µes sobre o √∫ltimo release
   */
  public showLastRelease(): void {
    try {
      const lastTag = this.execCommand('git describe --tags --abbrev=0')
      const lastCommit = this.execCommand('git log -1 --pretty=format:"%h %s"')
      
      console.log('üì¶ √öltimo Release:')
      console.log(`   Tag: ${lastTag}`)
      console.log(`   Commit: ${lastCommit}`)
      
      // Verificar se h√° commits desde o √∫ltimo release
      const commitsSince = this.execCommand(`git log ${lastTag}..HEAD --oneline`)
      if (commitsSince) {
        console.log(`\nüìã Commits desde √∫ltimo release:`)
        commitsSince.split('\n').forEach(commit => {
          console.log(`   - ${commit}`)
        })
      } else {
        console.log('\n‚úÖ Nenhum commit desde o √∫ltimo release')
      }
    } catch (error) {
      console.error('‚ùå Erro ao obter informa√ß√µes do √∫ltimo release:', error)
    }
  }
}

// Fun√ß√£o principal
async function main() {
  const args = process.argv.slice(2)
  const releaseManager = new ReleaseManager()

  if (args.length === 0) {
    console.log(`
üöÄ Release Manager - Sistema de release autom√°tico

Uso: npm run release [tipo] [op√ß√µes]

Tipos:
  patch     Release de patch (1.0.0 -> 1.0.1)
  minor     Release menor (1.0.0 -> 1.1.0)
  major     Release maior (1.0.0 -> 2.0.0)

Op√ß√µes:
  --description "texto"    Descri√ß√£o do release
  --skip-tests           Pular execu√ß√£o de testes
  --skip-build           Pular build da aplica√ß√£o
  --skip-push            Pular push para reposit√≥rio
  --dry-run              Simular release sem aplicar mudan√ßas
  --last                 Mostrar informa√ß√µes do √∫ltimo release

Exemplos:
  npm run release patch
  npm run release minor --description "Nova funcionalidade"
  npm run release major --skip-tests --dry-run
  npm run release --last
    `)
    return
  }

  if (args[0] === '--last') {
    releaseManager.showLastRelease()
    return
  }

  const type = args[0] as 'patch' | 'minor' | 'major'
  if (!['patch', 'minor', 'major'].includes(type)) {
    console.error(`‚ùå Tipo de release inv√°lido: ${type}`)
    process.exit(1)
  }

  const options: ReleaseOptions = {
    type,
    skipTests: args.includes('--skip-tests'),
    skipBuild: args.includes('--skip-build'),
    skipPush: args.includes('--skip-push'),
    dryRun: args.includes('--dry-run')
  }

  // Extrair descri√ß√£o
  const descIndex = args.indexOf('--description')
  if (descIndex !== -1 && args[descIndex + 1]) {
    options.description = args[descIndex + 1]
  }

  await releaseManager.release(options)
}

// Executar se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error)
}

export default ReleaseManager
