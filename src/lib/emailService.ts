import emailjs from '@emailjs/browser'

export interface EmailConfig {
  serviceId: string
  templateId: string
  publicKey: string
}

export interface ContactEmailData {
  nome: string
  email: string
  telefone?: string
  assunto: string
  mensagem: string
  destinatarios: string[]
}

// Fun√ß√£o para inicializar EmailJS
export function initEmailJS(config: EmailConfig): void {
  emailjs.init(config.publicKey)
}

// Fun√ß√£o para enviar email diretamente
export async function sendContactEmail(
  emailData: ContactEmailData,
  config: EmailConfig
): Promise<{ success: boolean; message: string }> {
  console.log('üöÄ [EmailJS] Iniciando envio de email...')
  console.log('üìß [EmailJS] Dados do email:', {
    nome: emailData.nome,
    email: emailData.email,
    assunto: emailData.assunto,
    destinatarios: emailData.destinatarios
  })
  console.log('‚öôÔ∏è [EmailJS] Configura√ß√£o:', {
    serviceId: config.serviceId,
    templateId: config.templateId,
    publicKey: config.publicKey ? `${config.publicKey.substring(0, 10)}...` : 'N/A'
  })

  try {
    // Validar configura√ß√£o
    if (!config.serviceId || !config.templateId || !config.publicKey) {
      console.error('‚ùå [EmailJS] Configura√ß√£o incompleta:', {
        serviceId: !!config.serviceId,
        templateId: !!config.templateId,
        publicKey: !!config.publicKey
      })
      return {
        success: false,
        message: 'Configura√ß√£o de email n√£o encontrada. Entre em contato com o administrador.'
      }
    }

    console.log('‚úÖ [EmailJS] Configura√ß√£o v√°lida, inicializando...')
    
    // Inicializar EmailJS se ainda n√£o foi inicializado
    initEmailJS(config)
    console.log('üîß [EmailJS] EmailJS inicializado')

    // IMPORTANTE: EmailJS n√£o envia diretamente para destinat√°rios externos
    // Ele envia para o email configurado no template do EmailJS
    // Para enviar para m√∫ltiplos destinat√°rios, precisamos:
    // 1. Configurar o template no EmailJS para incluir os destinat√°rios no corpo do email
    // 2. Ou enviar um email por destinat√°rio (mais custoso)
    
    // Preparar dados do template
    const templateParams = {
      from_name: emailData.nome,
      from_email: emailData.email,
      phone: emailData.telefone || 'N√£o informado',
      subject: `[Contato - Reposit√≥rio de Vagas] ${emailData.assunto}`,
      message: emailData.mensagem,
      // IMPORTANTE: to_email deve ser o email configurado no template do EmailJS
      // Os destinat√°rios reais devem estar no corpo da mensagem
      to_email: 'roberio.gomes@atento.com', // Email configurado no template
      reply_to: emailData.email,
      // Adicionar destinat√°rios no corpo da mensagem
      destinatarios: emailData.destinatarios.join(', '),
      destinatarios_count: emailData.destinatarios.length
    }

    console.log('üìù [EmailJS] Par√¢metros do template:', templateParams)
    console.log('‚ö†Ô∏è [EmailJS] IMPORTANTE: Email ser√° enviado para o email configurado no template do EmailJS')
    console.log('üìß [EmailJS] Destinat√°rios reais ser√£o inclu√≠dos no corpo do email:', emailData.destinatarios)

    // Enviar email
    console.log('üì§ [EmailJS] Enviando email...')
    const response = await emailjs.send(
      config.serviceId,
      config.templateId,
      templateParams
    )

    console.log('üì® [EmailJS] Resposta do EmailJS:', {
      status: response.status,
      text: response.text
    })

    if (response.status === 200) {
      console.log('‚úÖ [EmailJS] Email enviado com sucesso!')
      return {
        success: true,
        message: `Email enviado com sucesso! Voc√™ receber√° a mensagem na sua caixa de email configurada no EmailJS. Os destinat√°rios (${emailData.destinatarios.join(', ')}) foram inclu√≠dos no corpo do email para voc√™ encaminhar.`
      }
    } else {
      console.error('‚ùå [EmailJS] Erro no status da resposta:', response.status)
      return {
        success: false,
        message: 'Erro ao enviar email. Tente novamente.'
      }
    }
  } catch (error: any) {
    console.error('üí• [EmailJS] Erro ao enviar email:', error)
    console.error('üí• [EmailJS] Detalhes do erro:', {
      message: error.message,
      text: error.text,
      status: error.status,
      statusText: error.statusText
    })
    
    // Tratar erros espec√≠ficos
    if (error.text?.includes('Invalid email')) {
      console.error('‚ùå [EmailJS] Email inv√°lido detectado')
      return {
        success: false,
        message: 'Email inv√°lido. Verifique o endere√ßo de email.'
      }
    }
    
    if (error.text?.includes('Template not found')) {
      console.error('‚ùå [EmailJS] Template n√£o encontrado')
      return {
        success: false,
        message: 'Template de email n√£o encontrado. Entre em contato com o administrador.'
      }
    }

    if (error.text?.includes('Service not found')) {
      console.error('‚ùå [EmailJS] Servi√ßo n√£o encontrado')
      return {
        success: false,
        message: 'Servi√ßo de email n√£o encontrado. Verifique a configura√ß√£o.'
      }
    }

    if (error.text?.includes('Invalid public key')) {
      console.error('‚ùå [EmailJS] Chave p√∫blica inv√°lida')
      return {
        success: false,
        message: 'Chave p√∫blica inv√°lida. Verifique a configura√ß√£o.'
      }
    }

    console.error('‚ùå [EmailJS] Erro n√£o tratado:', error)
    return {
      success: false,
      message: `Erro ao enviar email: ${error.message || 'Erro desconhecido'}`
    }
  }
}

// Fun√ß√£o para testar configura√ß√£o de email
export async function testEmailConfig(config: EmailConfig): Promise<{ success: boolean; message: string }> {
  console.log('üß™ [EmailJS] Iniciando teste de configura√ß√£o...')
  console.log('‚öôÔ∏è [EmailJS] Configura√ß√£o de teste:', {
    serviceId: config.serviceId,
    templateId: config.templateId,
    publicKey: config.publicKey ? `${config.publicKey.substring(0, 10)}...` : 'N/A'
  })

  try {
    if (!config.serviceId || !config.templateId || !config.publicKey) {
      console.error('‚ùå [EmailJS] Configura√ß√£o incompleta para teste')
      return {
        success: false,
        message: 'Configura√ß√£o incompleta'
      }
    }

    console.log('‚úÖ [EmailJS] Configura√ß√£o v√°lida para teste, inicializando...')
    initEmailJS(config)
    console.log('üîß [EmailJS] EmailJS inicializado para teste')

    // Enviar email de teste
    const testParams = {
      from_name: 'Sistema de Teste',
      from_email: 'teste@sistema.com',
      phone: 'N√£o informado',
      subject: 'Teste de Configura√ß√£o',
      message: 'Este √© um email de teste para verificar se a configura√ß√£o est√° funcionando.',
      to_email: 'teste@exemplo.com',
      reply_to: 'teste@sistema.com'
    }

    console.log('üìù [EmailJS] Par√¢metros de teste:', testParams)
    console.log('üì§ [EmailJS] Enviando email de teste...')

    const response = await emailjs.send(
      config.serviceId,
      config.templateId,
      testParams
    )

    console.log('üì® [EmailJS] Resposta do teste:', {
      status: response.status,
      text: response.text
    })

    const success = response.status === 200
    console.log(success ? '‚úÖ [EmailJS] Teste bem-sucedido!' : '‚ùå [EmailJS] Teste falhou')

    return {
      success,
      message: success ? 'Configura√ß√£o v√°lida!' : 'Erro na configura√ß√£o'
    }
  } catch (error: any) {
    console.error('üí• [EmailJS] Erro no teste:', error)
    console.error('üí• [EmailJS] Detalhes do erro no teste:', {
      message: error.message,
      text: error.text,
      status: error.status,
      statusText: error.statusText
    })
    
    return {
      success: false,
      message: `Erro no teste: ${error.message}`
    }
  }
}
