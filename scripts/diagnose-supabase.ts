// Script de diagn√≥stico completo do Supabase
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://mywaoaofatgwbbtyqfpd.supabase.co'
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im15d2FvYW9mYXRnd2JidHlxZnBkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg2MDAzMjQsImV4cCI6MjA3NDE3NjMyNH0._9AMjjkQnDam-ciD9r07X4IpiWG2Hl0jBrFcY-v61Wg'
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im15d2FvYW9mYXRnd2JidHlxZnBkIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1ODYwMDMyNCwiZXhwIjoyMDc0MTc2MzI0fQ.oUhs-CNusuqxKFIwjc1zv0Nh4TJ6opnmzt8_V1Lfq7U'

async function diagnoseSupabase() {
  console.log('üîç Diagn√≥stico Completo do Supabase')
  console.log('=' .repeat(50))

  try {
    // 1. Testar cliente an√¥nimo
    console.log('\nüì° 1. Testando cliente an√¥nimo...')
    const supabase = createClient(supabaseUrl, supabaseAnonKey)
    
    const { data: testData, error: testError } = await supabase
      .from('vagas')
      .select('count')
      .limit(1)
    
    if (testError) {
      console.log(`‚ùå Erro com cliente an√¥nimo: ${testError.message}`)
    } else {
      console.log('‚úÖ Cliente an√¥nimo funcionando')
    }

    // 2. Testar cliente admin
    console.log('\nüîë 2. Testando cliente admin...')
    const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey)
    
    const { data: adminData, error: adminError } = await supabaseAdmin
      .from('vagas')
      .select('count')
      .limit(1)
    
    if (adminError) {
      console.log(`‚ùå Erro com cliente admin: ${adminError.message}`)
    } else {
      console.log('‚úÖ Cliente admin funcionando')
    }

    // 3. Testar tabelas espec√≠ficas
    console.log('\nüìä 3. Testando tabelas espec√≠ficas...')
    
    const tables = ['users', 'vagas', 'contact_email_config', 'backup_logs']
    
    for (const table of tables) {
      try {
        const { data, error } = await supabaseAdmin
          .from(table)
          .select('count')
          .limit(1)
        
        if (error) {
          console.log(`‚ùå Tabela ${table}: ${error.message}`)
        } else {
          console.log(`‚úÖ Tabela ${table}: OK`)
        }
      } catch (err) {
        console.log(`‚ùå Tabela ${table}: ${err.message}`)
      }
    }

    // 4. Testar autentica√ß√£o
    console.log('\nüîê 4. Testando autentica√ß√£o...')
    
    const { data: authData, error: authError } = await supabase.auth.getSession()
    
    if (authError) {
      console.log(`‚ùå Erro de autentica√ß√£o: ${authError.message}`)
    } else {
      console.log(`‚úÖ Autentica√ß√£o: ${authData.session ? 'Sess√£o ativa' : 'Sem sess√£o'}`)
    }

    // 5. Testar pol√≠ticas RLS
    console.log('\nüõ°Ô∏è 5. Testando pol√≠ticas RLS...')
    
    try {
      // Tentar inserir um registro de teste (deve falhar sem autentica√ß√£o)
      const { data: insertData, error: insertError } = await supabase
        .from('vagas')
        .insert({
          site: 'TESTE',
          categoria: 'TESTE',
          cargo: 'TESTE',
          cliente: 'TESTE',
          celula: 'TESTE'
        })
      
      if (insertError) {
        console.log(`‚úÖ RLS funcionando: ${insertError.message}`)
      } else {
        console.log('‚ö†Ô∏è RLS pode n√£o estar funcionando corretamente')
      }
    } catch (err) {
      console.log(`‚úÖ RLS funcionando: ${err.message}`)
    }

    // 6. Verificar configura√ß√µes
    console.log('\n‚öôÔ∏è 6. Verificando configura√ß√µes...')
    console.log(`üì° URL: ${supabaseUrl}`)
    console.log(`üîë Anon Key: ${supabaseAnonKey.substring(0, 20)}...`)
    console.log(`üîë Service Key: ${supabaseServiceKey.substring(0, 20)}...`)

    console.log('\n‚úÖ Diagn√≥stico conclu√≠do!')

  } catch (error) {
    console.error('‚ùå Erro durante diagn√≥stico:', error)
  }
}

// Executar diagn√≥stico
diagnoseSupabase()
