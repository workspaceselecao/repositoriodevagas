#!/usr/bin/env node

/**
 * Script de teste final para verificar se todos os problemas PWA foram resolvidos
 */

import fs from 'fs'
import path from 'path'

console.log('üîç Teste Final PWA - Verificando corre√ß√µes...\n')

let allTestsPassed = true

// Teste 1: Verificar se os √≠cones SVG existem e n√£o s√£o corrompidos
console.log('1Ô∏è‚É£ Testando √≠cones SVG...')
const iconSvgPath = 'public/icons/icon.svg'
if (fs.existsSync(iconSvgPath)) {
  const iconContent = fs.readFileSync(iconSvgPath, 'utf8')
  if (iconContent.includes('<svg') && iconContent.includes('viewBox="0 0 512 512"')) {
    console.log('  ‚úÖ √çcone SVG v√°lido encontrado')
  } else {
    console.log('  ‚ùå √çcone SVG inv√°lido')
    allTestsPassed = false
  }
} else {
  console.log('  ‚ùå √çcone SVG n√£o encontrado')
  allTestsPassed = false
}

// Teste 2: Verificar se os screenshots SVG existem
console.log('\n2Ô∏è‚É£ Testando screenshots...')
const screenshots = [
  'public/screenshots/desktop-wide.svg',
  'public/screenshots/mobile-narrow.svg'
]

screenshots.forEach(screenshot => {
  if (fs.existsSync(screenshot)) {
    const content = fs.readFileSync(screenshot, 'utf8')
    if (content.includes('<svg')) {
      console.log(`  ‚úÖ ${path.basename(screenshot)} v√°lido`)
    } else {
      console.log(`  ‚ùå ${path.basename(screenshot)} inv√°lido`)
      allTestsPassed = false
    }
  } else {
    console.log(`  ‚ùå ${path.basename(screenshot)} n√£o encontrado`)
    allTestsPassed = false
  }
})

// Teste 3: Verificar manifest.json
console.log('\n3Ô∏è‚É£ Testando manifest.json...')
try {
  const manifest = JSON.parse(fs.readFileSync('public/manifest.json', 'utf8'))
  
  // Verificar campos obrigat√≥rios
  const requiredFields = ['name', 'short_name', 'start_url', 'display', 'icons']
  requiredFields.forEach(field => {
    if (manifest[field]) {
      console.log(`  ‚úÖ ${field}: ${manifest[field]}`)
    } else {
      console.log(`  ‚ùå Campo obrigat√≥rio ${field} faltando`)
      allTestsPassed = false
    }
  })
  
  // Verificar √≠cones SVG
  if (manifest.icons && manifest.icons.length > 0) {
    const hasSvgIcon = manifest.icons.some(icon => 
      icon.type === 'image/svg+xml' && icon.src === '/icons/icon.svg'
    )
    if (hasSvgIcon) {
      console.log('  ‚úÖ √çcones SVG configurados corretamente')
    } else {
      console.log('  ‚ùå √çcones SVG n√£o configurados')
      allTestsPassed = false
    }
  }
  
  // Verificar screenshots
  if (manifest.screenshots && manifest.screenshots.length > 0) {
    console.log(`  ‚úÖ ${manifest.screenshots.length} screenshots configurados`)
    manifest.screenshots.forEach(screenshot => {
      console.log(`    üì∏ ${screenshot.form_factor}: ${screenshot.sizes}`)
    })
  } else {
    console.log('  ‚ùå Screenshots n√£o configurados')
    allTestsPassed = false
  }
  
} catch (error) {
  console.log('  ‚ùå Erro ao ler manifest.json:', error.message)
  allTestsPassed = false
}

// Teste 4: Verificar service worker
console.log('\n4Ô∏è‚É£ Testando service worker...')
if (fs.existsSync('public/sw.js')) {
  const swContent = fs.readFileSync('public/sw.js', 'utf8')
  const requiredFeatures = ['addEventListener', 'install', 'activate', 'fetch', 'caches']
  
  requiredFeatures.forEach(feature => {
    if (swContent.includes(feature)) {
      console.log(`  ‚úÖ ${feature} implementado`)
    } else {
      console.log(`  ‚ùå ${feature} n√£o encontrado`)
      allTestsPassed = false
    }
  })
} else {
  console.log('  ‚ùå Service worker n√£o encontrado')
  allTestsPassed = false
}

// Teste 5: Verificar componentes React
console.log('\n5Ô∏è‚É£ Testando componentes React...')
const reactFiles = [
  'src/hooks/usePWA.ts',
  'src/components/PWAInstallPrompt.tsx',
  'src/components/OfflineIndicator.tsx'
]

reactFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`  ‚úÖ ${file} existe`)
  } else {
    console.log(`  ‚ùå ${file} n√£o encontrado`)
    allTestsPassed = false
  }
})

// Resultado final
console.log('\n' + '='.repeat(50))
if (allTestsPassed) {
  console.log('üéâ TODOS OS TESTES PASSARAM!')
  console.log('\n‚úÖ Problemas resolvidos:')
  console.log('  üîß √çcones 1x1px ‚Üí √çcones SVG funcionais')
  console.log('  üì∏ Screenshots faltando ‚Üí Screenshots SVG adicionados')
  console.log('  ‚öôÔ∏è Service worker ‚Üí Implementado e funcional')
  console.log('  üéØ Manifest ‚Üí Otimizado e completo')
  console.log('  ‚öõÔ∏è Componentes React ‚Üí Implementados')
  
  console.log('\nüöÄ Pr√≥ximos passos:')
  console.log('  1. Reinicie o servidor: npm run dev')
  console.log('  2. Acesse: http://localhost:3003')
  console.log('  3. Abra DevTools > Application > Manifest')
  console.log('  4. Verifique se os avisos foram resolvidos')
  console.log('  5. Teste o √≠cone de instala√ß√£o PWA')
  
  console.log('\nüí° Nota sobre HTTPS:')
  console.log('  - Para desenvolvimento: HTTP funciona (com limita√ß√µes)')
  console.log('  - Para produ√ß√£o: HTTPS √© obrigat√≥rio para PWA completo')
  console.log('  - O √≠cone de instala√ß√£o deve aparecer mesmo em HTTP')
  
} else {
  console.log('‚ùå ALGUNS TESTES FALHARAM!')
  console.log('Verifique os erros acima e corrija antes de continuar.')
  process.exit(1)
}
