export const APP_VERSION = "1.2.3"
export const BUILD_DATE = new Date().toISOString()

// Chave para armazenar a vers√£o atual no localStorage
const VERSION_STORAGE_KEY = 'repositoriodevagas_current_version'
const LAST_CHECK_KEY = 'repositoriodevagas_last_check'

interface VersionInfo {
  version: string
  buildDate: string
  description?: string
}

// Fun√ß√£o para obter a vers√£o atual armazenada
export const getCurrentStoredVersion = (): string | null => {
  try {
    return localStorage.getItem(VERSION_STORAGE_KEY)
  } catch {
    return null
  }
}

// Fun√ß√£o para armazenar a vers√£o atual
export const setCurrentStoredVersion = (version: string): void => {
  try {
    localStorage.setItem(VERSION_STORAGE_KEY, version)
    localStorage.setItem(LAST_CHECK_KEY, new Date().toISOString())
  } catch (error) {
    console.warn('N√£o foi poss√≠vel armazenar a vers√£o:', error)
  }
}

// Fun√ß√£o para buscar informa√ß√µes da vers√£o do servidor
export const fetchServerVersion = async (): Promise<VersionInfo | null> => {
  try {
    // Adicionar timestamp para evitar cache
    const timestamp = Date.now()
    const response = await fetch(`/version.json?t=${timestamp}`, {
      method: 'GET',
      cache: 'no-store',
      headers: {
        'Cache-Control': 'no-store, no-cache, must-revalidate, proxy-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    })
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`)
    }
    
    const data = await response.json()
    
    if (!data.version) {
      throw new Error('Vers√£o n√£o encontrada na resposta do servidor')
    }
    
    console.log('üì¶ Vers√£o do servidor:', data.version, '| Vers√£o local:', APP_VERSION)
    return data
  } catch (error) {
    console.error('‚ùå Erro ao buscar vers√£o do servidor:', error)
    return null
  }
}

// Fun√ß√£o para verificar se h√° nova vers√£o dispon√≠vel
export const checkForUpdates = async (): Promise<boolean> => {
  try {
    console.log('üîç Verificando atualiza√ß√µes...')
    
    // Verificar se j√° verificamos recentemente (evitar spam)
    const lastCheck = localStorage.getItem(LAST_CHECK_KEY)
    if (lastCheck) {
      const lastCheckTime = new Date(lastCheck).getTime()
      const now = Date.now()
      const timeDiff = now - lastCheckTime
      
      // Se verificamos h√° menos de 5 minutos, n√£o verificar novamente
      if (timeDiff < 5 * 60 * 1000) {
        console.log('‚è∞ Verifica√ß√£o muito recente, pulando...')
        return false
      }
    }
    
    // Buscar vers√£o do servidor
    const serverVersion = await fetchServerVersion()
    
    if (!serverVersion) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel obter vers√£o do servidor')
      return false
    }
    
    // Obter vers√£o armazenada localmente
    const storedVersion = getCurrentStoredVersion()
    
    // Se n√£o h√° vers√£o armazenada, armazenar a atual e n√£o mostrar atualiza√ß√£o
    if (!storedVersion) {
      console.log('üìù Primeira verifica√ß√£o, armazenando vers√£o atual')
      setCurrentStoredVersion(APP_VERSION)
      return false
    }
    
    // Comparar vers√µes - CORRE√á√ÉO: comparar com APP_VERSION atual, n√£o com storedVersion
    const hasUpdate = serverVersion.version !== APP_VERSION
    
    console.log('üîÑ Compara√ß√£o de vers√µes:')
    console.log(`   APP_VERSION atual: ${APP_VERSION}`)
    console.log(`   Servidor: ${serverVersion.version}`)
    console.log(`   Armazenada: ${storedVersion}`)
    console.log(`   Nova vers√£o dispon√≠vel: ${hasUpdate ? '‚úÖ SIM' : '‚ùå N√ÉO'}`)
    
    // Atualizar timestamp da √∫ltima verifica√ß√£o
    localStorage.setItem(LAST_CHECK_KEY, new Date().toISOString())
    
    return hasUpdate
  } catch (error) {
    console.error('‚ùå Erro ao verificar atualiza√ß√µes:', error)
    return false
  }
}

// Fun√ß√£o para for√ßar reload da aplica√ß√£o
export const forceReload = () => {
  console.log('üîÑ For√ßando reload da aplica√ß√£o...')
  
  // Buscar a vers√£o atual do servidor e atualizar o localStorage antes do reload
  fetchServerVersion().then(serverVersion => {
    if (serverVersion) {
      // CORRE√á√ÉO: Atualizar para a vers√£o do servidor, n√£o manter a atual
      setCurrentStoredVersion(serverVersion.version)
      console.log('‚úÖ Vers√£o atualizada no localStorage para:', serverVersion.version)
      
      // Limpar cache do navegador para garantir que a nova vers√£o seja carregada
      if ('caches' in window) {
        caches.keys().then(names => {
          names.forEach(name => {
            caches.delete(name)
          })
          console.log('üóëÔ∏è Cache limpo para nova vers√£o')
        })
      }
    }
  }).catch(error => {
    console.warn('‚ö†Ô∏è N√£o foi poss√≠vel atualizar vers√£o antes do reload:', error)
  }).finally(() => {
    // For√ßar reload com cache bypass para garantir nova vers√£o
    setTimeout(() => {
      window.location.reload() // For√ßa reload sem cache
    }, 100)
  })
}

// Fun√ß√£o para inicializar o sistema de vers√£o (chamada na inicializa√ß√£o da app)
export const initializeVersionSystem = () => {
  try {
    const storedVersion = getCurrentStoredVersion()
    
    if (!storedVersion) {
      // Primeira vez que a aplica√ß√£o √© executada
      setCurrentStoredVersion(APP_VERSION)
      console.log('üöÄ Sistema de vers√£o inicializado com vers√£o:', APP_VERSION)
    } else {
      console.log('üìã Vers√£o armazenada:', storedVersion, '| Vers√£o atual:', APP_VERSION)
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è Erro ao inicializar sistema de vers√£o:', error)
  }
}
