-- Script para testar as pol√≠ticas RLS implementadas
-- Execute este script no SQL Editor do Supabase ap√≥s implementar as pol√≠ticas

-- ========================================
-- TESTES DE FUN√á√ïES AUXILIARES
-- ========================================

-- Teste 1: Verificar se as fun√ß√µes foram criadas corretamente
SELECT 
  'get_current_user_role' as function_name,
  get_current_user_role() as result;

SELECT 
  'is_admin' as function_name,
  is_admin() as result;

SELECT 
  'is_rh_or_admin' as function_name,
  is_rh_or_admin() as result;

-- ========================================
-- TESTES DE POL√çTICAS
-- ========================================

-- Teste 2: Verificar se consegue acessar a tabela users
-- (Este teste deve funcionar para o usu√°rio atual)
SELECT 
  'users_table_access' as test,
  COUNT(*) as user_count
FROM users;

-- Teste 3: Verificar se consegue acessar a tabela vagas
SELECT 
  'vagas_table_access' as test,
  COUNT(*) as vagas_count
FROM vagas;

-- Teste 4: Verificar informa√ß√µes do usu√°rio atual
SELECT 
  'current_user_info' as test,
  auth.uid() as user_id,
  auth.role() as auth_role,
  auth.jwt() ->> 'role' as jwt_role;

-- ========================================
-- VERIFICA√á√ÉO DE POL√çTICAS ATIVAS
-- ========================================

-- Teste 5: Listar todas as pol√≠ticas ativas
SELECT 
  'active_policies' as info,
  tablename,
  policyname,
  cmd as operation,
  permissive
FROM pg_policies 
WHERE tablename IN ('users', 'vagas', 'backup_logs')
ORDER BY tablename, policyname;

-- Teste 6: Verificar status do RLS
SELECT 
  'rls_status' as info,
  tablename,
  rowsecurity as rls_enabled
FROM pg_tables 
WHERE tablename IN ('users', 'vagas', 'backup_logs')
ORDER BY tablename;

-- ========================================
-- TESTES DE PERMISS√ïES ESPEC√çFICAS
-- ========================================

-- Teste 7: Tentar inserir um usu√°rio (deve funcionar se for admin)
-- CUIDADO: Este teste pode falhar se n√£o for admin
/*
INSERT INTO users (id, email, name, role, password_hash)
VALUES (
  gen_random_uuid(),
  'teste@exemplo.com',
  'Usu√°rio Teste',
  'RH',
  ''
);
*/

-- Teste 8: Verificar se consegue ver dados espec√≠ficos
SELECT 
  'user_data_access' as test,
  id,
  email,
  name,
  role
FROM users 
WHERE email = 'roberio.gomes@atento.com'
LIMIT 1;

-- ========================================
-- DIAGN√ìSTICO DE PROBLEMAS
-- ========================================

-- Teste 9: Verificar logs de erro recentes (se dispon√≠vel)
SELECT 
  'error_check' as info,
  'Verifique o console do navegador para erros de autentica√ß√£o' as message;

-- Teste 10: Verificar configura√ß√£o de autentica√ß√£o
SELECT 
  'auth_config' as info,
  'Verifique se as URLs de redirecionamento est√£o configuradas no Supabase' as message;

-- ========================================
-- INSTRU√á√ïES DE INTERPRETA√á√ÉO
-- ========================================

/*
INTERPRETA√á√ÉO DOS RESULTADOS:

‚úÖ SUCESSO se:
- Todas as fun√ß√µes retornam valores v√°lidos
- Consegue acessar as tabelas users e vagas
- auth.uid() retorna um UUID v√°lido
- auth.role() retorna 'authenticated'
- RLS est√° habilitado (rowsecurity = true)

‚ùå PROBLEMA se:
- Fun√ß√µes retornam NULL ou erro
- N√£o consegue acessar as tabelas
- auth.uid() retorna NULL
- auth.role() retorna 'anon'
- RLS est√° desabilitado (rowsecurity = false)

üîß A√á√ïES CORRETIVAS:
- Se auth.uid() for NULL: problema de autentica√ß√£o
- Se auth.role() for 'anon': usu√°rio n√£o est√° logado
- Se n√£o conseguir acessar tabelas: pol√≠ticas muito restritivas
- Se RLS estiver desabilitado: executar script novamente
*/
